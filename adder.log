nohup: ignoring input
--> Generating subcircuit entries:
Subcircuit 0 has 18 entries.
Subcircuit 1 has 18 entries.
--> Total number of shots: 208896
--> Running Prior Samples
--> Optimizing Parameters
-----> Reading data
Tensor Memory: 6.866455078125e-05 MB
Traceback (most recent call last):
  File "/home/b10901076/ShotQC/adder.py", line 59, in <module>
    shotqc.execute(
  File "/home/b10901076/ShotQC/shotqc/main.py", line 124, in execute
    self._optimize_params(method=method, prior=prior, batch_size=batch_size)
  File "/home/b10901076/ShotQC/shotqc/main.py", line 155, in _optimize_params
    opt_cost, self.params = parallel_optimize_params_sgd(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/b10901076/ShotQC/shotqc/optimizer.py", line 10, in parallel_optimize_params_sgd
    loss = parallel_cost_function(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/b10901076/ShotQC/shotqc/parallel_overhead_v2.py", line 149, in parallel_cost_function
    entry_coef = total_entry_coef(
                 ^^^^^^^^^^^^^^^^^
  File "/home/b10901076/ShotQC/shotqc/parallel_overhead_v2.py", line 118, in total_entry_coef
    self_probs = permuted_probs[indices]
                 ~~~~~~~~~~~~~~^^^^^^^^^
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 32.00 MiB. GPU 0 has a total capacity of 15.72 GiB of which 21.88 MiB is free. Including non-PyTorch memory, this process has 15.67 GiB memory in use. Of the allocated memory 15.42 GiB is allocated by PyTorch, and 68.74 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
